
//          Copyright 2016, Vitali Baumtrok.
// Distributed under the Boost Software License, Version 1.0.
//     (See accompanying file LICENSE or copy at
//        http://www.boost.org/LICENSE_1_0.txt)


package xlib


// #cgo LDFLAGS: -lGL
// #include <stdlib.h>
// #include <GL/glx.h>
import "C"
import (
	"unsafe"
	"gitlab.com/vbg/xlib"
)

const (
	VERSION_1_1 = C.GLX_VERSION_1_1
	VERSION_1_2 = C.GLX_VERSION_1_2
	VERSION_1_3 = C.GLX_VERSION_1_3
	VERSION_1_4 = C.GLX_VERSION_1_4
)

const (
	EXTENSION_NAME = C.GLX_EXTENSION_NAME
)

// Tokens for glXChooseVisual and glXGetConfig
const (
	USE_GL = C.GLX_USE_GL
	BUFFER_SIZE = C.GLX_BUFFER_SIZE
	LEVEL = C.GLX_LEVEL
	RGBA = C.GLX_RGBA
	DOUBLEBUFFER = C.GLX_DOUBLEBUFFER
	STEREO = C.GLX_STEREO
	AUX_BUFFERS = C.GLX_AUX_BUFFERS
	RED_SIZE = C.GLX_RED_SIZE
	GREEN_SIZE = C.GLX_GREEN_SIZE
	BLUE_SIZE = C.GLX_BLUE_SIZE
	ALPHA_SIZE = C.GLX_ALPHA_SIZE
	DEPTH_SIZE = C.GLX_DEPTH_SIZE
	STENCIL_SIZE = C.GLX_STENCIL_SIZE
	ACCUM_RED_SIZE = C.GLX_ACCUM_RED_SIZE
	ACCUM_GREEN_SIZE = C.GLX_ACCUM_GREEN_SIZE
	ACCUM_BLUE_SIZE = C.GLX_ACCUM_BLUE_SIZE
	ACCUM_ALPHA_SIZE = C.GLX_ACCUM_ALPHA_SIZE
)

// Error codes returned by glXGetConfig:
const (
	BAD_SCREEN = C.GLX_BAD_SCREEN
	BAD_ATTRIBUTE = C.GLX_BAD_ATTRIBUTE
	NO_EXTENSION = C.GLX_NO_EXTENSION
	BAD_VISUAL = C.GLX_BAD_VISUAL
	BAD_CONTEXT = C.GLX_BAD_CONTEXT
	BAD_VALUE = C.GLX_BAD_VALUE
	BAD_ENUM = C.GLX_BAD_ENUM
)

// GLX 1.1 and later
const (
	VENDOR = C.GLX_VENDOR
	VERSION = C.GLX_VERSION
	EXTENSIONS = C.GLX_EXTENSIONS
)

// GLX 1.3 and later
const (
	CONFIG_CAVEAT = C.GLX_CONFIG_CAVEAT
	DONT_CARE = C.GLX_DONT_CARE
	X_VISUAL_TYPE = C.GLX_X_VISUAL_TYPE
	TRANSPARENT_TYPE = C.GLX_TRANSPARENT_TYPE
	TRANSPARENT_INDEX_VALUE = C.GLX_TRANSPARENT_INDEX_VALUE
	TRANSPARENT_RED_VALUE = C.GLX_TRANSPARENT_RED_VALUE
	TRANSPARENT_GREEN_VALUE = C.GLX_TRANSPARENT_GREEN_VALUE
	TRANSPARENT_BLUE_VALUE = C.GLX_TRANSPARENT_BLUE_VALUE
	TRANSPARENT_ALPHA_VALUE = C.GLX_TRANSPARENT_ALPHA_VALUE
	WINDOW_BIT = C.GLX_WINDOW_BIT
	PIXMAP_BIT = C.GLX_PIXMAP_BIT
	PBUFFER_BIT = C.GLX_PBUFFER_BIT
	AUX_BUFFERS_BIT = C.GLX_AUX_BUFFERS_BIT
	FRONT_LEFT_BUFFER_BIT = C.GLX_FRONT_LEFT_BUFFER_BIT
	FRONT_RIGHT_BUFFER_BIT = C.GLX_FRONT_RIGHT_BUFFER_BIT
	BACK_LEFT_BUFFER_BIT = C.GLX_BACK_LEFT_BUFFER_BIT
	BACK_RIGHT_BUFFER_BIT = C.GLX_BACK_RIGHT_BUFFER_BIT
	DEPTH_BUFFER_BIT = C.GLX_DEPTH_BUFFER_BIT
	STENCIL_BUFFER_BIT = C.GLX_STENCIL_BUFFER_BIT
	ACCUM_BUFFER_BIT = C.GLX_ACCUM_BUFFER_BIT
	NONE = C.GLX_NONE
	SLOW_CONFIG = C.GLX_SLOW_CONFIG
	TRUE_COLOR = C.GLX_TRUE_COLOR
	DIRECT_COLOR = C.GLX_DIRECT_COLOR
	PSEUDO_COLOR = C.GLX_PSEUDO_COLOR
	STATIC_COLOR = C.GLX_STATIC_COLOR
	GRAY_SCALE = C.GLX_GRAY_SCALE
	STATIC_GRAY = C.GLX_STATIC_GRAY
	TRANSPARENT_RGB = C.GLX_TRANSPARENT_RGB
	TRANSPARENT_INDEX = C.GLX_TRANSPARENT_INDEX
	VISUAL_ID = C.GLX_VISUAL_ID
	SCREEN = C.GLX_SCREEN
	NON_CONFORMANT_CONFIG = C.GLX_NON_CONFORMANT_CONFIG
	DRAWABLE_TYPE = C.GLX_DRAWABLE_TYPE
	RENDER_TYPE = C.GLX_RENDER_TYPE
	X_RENDERABLE = C.GLX_X_RENDERABLE
	FBCONFIG_ID = C.GLX_FBCONFIG_ID
	RGBA_TYPE = C.GLX_RGBA_TYPE
	COLOR_INDEX_TYPE = C.GLX_COLOR_INDEX_TYPE
	MAX_PBUFFER_WIDTH = C.GLX_MAX_PBUFFER_WIDTH
	MAX_PBUFFER_HEIGHT = C.GLX_MAX_PBUFFER_HEIGHT
	MAX_PBUFFER_PIXELS = C.GLX_MAX_PBUFFER_PIXELS
	PRESERVED_CONTENTS = C.GLX_PRESERVED_CONTENTS
	LARGEST_PBUFFER = C.GLX_LARGEST_PBUFFER
	WIDTH = C.GLX_WIDTH
	HEIGHT = C.GLX_HEIGHT
	EVENT_MASK = C.GLX_EVENT_MASK
	DAMAGED = C.GLX_DAMAGED
	SAVED = C.GLX_SAVED
	WINDOW = C.GLX_WINDOW
	PBUFFER = C.GLX_PBUFFER
	PBUFFER_HEIGHT = C.GLX_PBUFFER_HEIGHT
	PBUFFER_WIDTH = C.GLX_PBUFFER_WIDTH
	RGBA_BIT = C.GLX_RGBA_BIT
	COLOR_INDEX_BIT = C.GLX_COLOR_INDEX_BIT
	PBUFFER_CLOBBER_MASK = C.GLX_PBUFFER_CLOBBER_MASK
)


// GLX 1.4 and later
const (
	SAMPLE_BUFFERS = C.GLX_SAMPLE_BUFFERS
	SAMPLE_SAMPLES = C.GLX_SAMPLES
)


type VisualInfo C.XVisualInfo


func ChooseVisual(display *xlib.Display, screenNumber int, attributeList []int) *VisualInfo {
	var visualInfo *C.XVisualInfo
	attributeListLength := len(attributeList)
	displayC := (*C.Display)(unsafe.Pointer(display))

	// some attributes
	if attributeListLength > 0 {

		// ends with None
		if attributeList[attributeListLength-1] == C.None {
			attributeListC := make([]C.int, attributeListLength)

			for i, attribute := range attributeList {
				attributeListC[i] = C.int(attribute)
			}

			visualInfo = C.glXChooseVisual(displayC, C.int(screenNumber), &attributeListC[0])

		// ends by length
		} else {
			attributeListC := make([]C.int, attributeListLength + 1)

			for i, attribute := range attributeList {
				attributeListC[i] = C.int(attribute)
			}
			attributeListC[attributeListLength] = C.None
			visualInfo = C.glXChooseVisual(displayC, C.int(screenNumber), &attributeListC[0])
		}

	// no attributes
	} else {
		none := C.int(C.None)
		visualInfo = C.glXChooseVisual(displayC, C.int(screenNumber), &none)
	}

	return (*VisualInfo)(visualInfo)
}

